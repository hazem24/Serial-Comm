
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000588  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800066  00800066  00000622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b88  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000766  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000021fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000943  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003173  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_13>
  38:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  8a:	0c 94 c2 02 	jmp	0x584	; 0x584 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
extern void DIO_SetPinDirection(uint8_t PinNumber,uint8_t Direction)
{
	
	
	
	if( (PinNumber>=0)&&(PinNumber<=7) )           //////////port a
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	e8 f4       	brcc	.+58     	; 0xd0 <DIO_SetPinDirection+0x3e>
	{
		  if (Direction == INPUT) 
  96:	61 11       	cpse	r22, r1
  98:	0e c0       	rjmp	.+28     	; 0xb6 <DIO_SetPinDirection+0x24>
		  {
			CLRBIT(DDRA, PinNumber);
  9a:	4a b3       	in	r20, 0x1a	; 26
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDirection+0x16>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDirection+0x12>
  ac:	cb 01       	movw	r24, r22
  ae:	80 95       	com	r24
  b0:	84 23       	and	r24, r20
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
		  } 
		  else 
		  {
			SETBIT(DDRA, PinNumber);
  b6:	4a b3       	in	r20, 0x1a	; 26
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	b9 01       	movw	r22, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_SetPinDirection+0x32>
  c0:	66 0f       	add	r22, r22
  c2:	77 1f       	adc	r23, r23
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_SetPinDirection+0x2e>
  c8:	cb 01       	movw	r24, r22
  ca:	84 2b       	or	r24, r20
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
	      } 

    }
	else if ((PinNumber>=8)&&(PinNumber<=15))        ////////port b 
  d0:	98 ef       	ldi	r25, 0xF8	; 248
  d2:	98 0f       	add	r25, r24
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	e8 f4       	brcc	.+58     	; 0x112 <DIO_SetPinDirection+0x80>
	{
		PinNumber=PinNumber-8;
		
		if (Direction == INPUT)
  d8:	61 11       	cpse	r22, r1
  da:	0e c0       	rjmp	.+28     	; 0xf8 <DIO_SetPinDirection+0x66>
		{
			CLRBIT(DDRB,PinNumber);
  dc:	47 b3       	in	r20, 0x17	; 23
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPinDirection+0x58>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPinDirection+0x54>
  ee:	cb 01       	movw	r24, r22
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	08 95       	ret
		}
		else
		{
			SETBIT(DDRB,PinNumber);
  f8:	47 b3       	in	r20, 0x17	; 23
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_SetPinDirection+0x74>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	9a 95       	dec	r25
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_SetPinDirection+0x70>
 10a:	cb 01       	movw	r24, r22
 10c:	84 2b       	or	r24, r20
 10e:	87 bb       	out	0x17, r24	; 23
 110:	08 95       	ret
		}

	}
	else if ((PinNumber>=16)&&(PinNumber<=23))        ////////port c
 112:	90 ef       	ldi	r25, 0xF0	; 240
 114:	98 0f       	add	r25, r24
 116:	98 30       	cpi	r25, 0x08	; 8
 118:	e8 f4       	brcc	.+58     	; 0x154 <DIO_SetPinDirection+0xc2>
	{
		PinNumber=PinNumber-16;
		
		if (Direction == INPUT)
 11a:	61 11       	cpse	r22, r1
 11c:	0e c0       	rjmp	.+28     	; 0x13a <DIO_SetPinDirection+0xa8>
		{
			CLRBIT(DDRC,PinNumber);
 11e:	44 b3       	in	r20, 0x14	; 20
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SetPinDirection+0x9a>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	9a 95       	dec	r25
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SetPinDirection+0x96>
 130:	cb 01       	movw	r24, r22
 132:	80 95       	com	r24
 134:	84 23       	and	r24, r20
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
		}
		else
		{
			SETBIT(DDRC,PinNumber);
 13a:	44 b3       	in	r20, 0x14	; 20
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b9 01       	movw	r22, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_SetPinDirection+0xb6>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	9a 95       	dec	r25
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_SetPinDirection+0xb2>
 14c:	cb 01       	movw	r24, r22
 14e:	84 2b       	or	r24, r20
 150:	84 bb       	out	0x14, r24	; 20
 152:	08 95       	ret
		}

	}
	else if ((PinNumber>=24)&&(PinNumber<=31))        ////////port d
 154:	88 51       	subi	r24, 0x18	; 24
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	e0 f4       	brcc	.+56     	; 0x192 <DIO_SetPinDirection+0x100>
	{
		PinNumber=PinNumber-24;
		
		if (Direction == INPUT)
 15a:	61 11       	cpse	r22, r1
 15c:	0e c0       	rjmp	.+28     	; 0x17a <DIO_SetPinDirection+0xe8>
		{
			CLRBIT(DDRD,PinNumber);
 15e:	41 b3       	in	r20, 0x11	; 17
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	b9 01       	movw	r22, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SetPinDirection+0xda>
 168:	66 0f       	add	r22, r22
 16a:	77 1f       	adc	r23, r23
 16c:	8a 95       	dec	r24
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SetPinDirection+0xd6>
 170:	cb 01       	movw	r24, r22
 172:	80 95       	com	r24
 174:	84 23       	and	r24, r20
 176:	81 bb       	out	0x11, r24	; 17
 178:	08 95       	ret
		}
		else
		{
			SETBIT(DDRD,PinNumber);
 17a:	41 b3       	in	r20, 0x11	; 17
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	b9 01       	movw	r22, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_SetPinDirection+0xf6>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_SetPinDirection+0xf2>
 18c:	cb 01       	movw	r24, r22
 18e:	84 2b       	or	r24, r20
 190:	81 bb       	out	0x11, r24	; 17
 192:	08 95       	ret

00000194 <DIO_WritePin>:

extern void DIO_WritePin(uint8_t PinNumber,uint8_t Value)
{
	 ////////////// lazem acheck 3la el direction eno ouput
	 
	 if( (PinNumber>=0)&&(PinNumber<=7) )           //////////port a
 194:	88 30       	cpi	r24, 0x08	; 8
 196:	e8 f4       	brcc	.+58     	; 0x1d2 <DIO_WritePin+0x3e>
	 {
		 if (Value == LOW)
 198:	61 11       	cpse	r22, r1
 19a:	0e c0       	rjmp	.+28     	; 0x1b8 <DIO_WritePin+0x24>
		 {
			 CLRBIT(PORTA, PinNumber);
 19c:	4b b3       	in	r20, 0x1b	; 27
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	b9 01       	movw	r22, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_WritePin+0x16>
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	8a 95       	dec	r24
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_WritePin+0x12>
 1ae:	cb 01       	movw	r24, r22
 1b0:	80 95       	com	r24
 1b2:	84 23       	and	r24, r20
 1b4:	8b bb       	out	0x1b, r24	; 27
 1b6:	08 95       	ret
		 }
		 else
		 {
			 SETBIT(PORTA, PinNumber);
 1b8:	4b b3       	in	r20, 0x1b	; 27
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	b9 01       	movw	r22, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePin+0x32>
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	8a 95       	dec	r24
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePin+0x2e>
 1ca:	cb 01       	movw	r24, r22
 1cc:	84 2b       	or	r24, r20
 1ce:	8b bb       	out	0x1b, r24	; 27
 1d0:	08 95       	ret
		 }

	 }
	 else if( (PinNumber>=8)&&(PinNumber<=15) )           //////////port b
 1d2:	98 ef       	ldi	r25, 0xF8	; 248
 1d4:	98 0f       	add	r25, r24
 1d6:	98 30       	cpi	r25, 0x08	; 8
 1d8:	e8 f4       	brcc	.+58     	; 0x214 <DIO_WritePin+0x80>
	 {
		 PinNumber=PinNumber-8;
		 
		 if (Value == LOW)
 1da:	61 11       	cpse	r22, r1
 1dc:	0e c0       	rjmp	.+28     	; 0x1fa <DIO_WritePin+0x66>
		 {
			 CLRBIT(PORTB, PinNumber);
 1de:	48 b3       	in	r20, 0x18	; 24
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	b9 01       	movw	r22, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_WritePin+0x58>
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	9a 95       	dec	r25
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_WritePin+0x54>
 1f0:	cb 01       	movw	r24, r22
 1f2:	80 95       	com	r24
 1f4:	84 23       	and	r24, r20
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
		 }
		 else
		 {
			 SETBIT(PORTB, PinNumber);
 1fa:	48 b3       	in	r20, 0x18	; 24
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_WritePin+0x74>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	9a 95       	dec	r25
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_WritePin+0x70>
 20c:	cb 01       	movw	r24, r22
 20e:	84 2b       	or	r24, r20
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
		 }

	 }
	 else if( (PinNumber>=16)&&(PinNumber<=23) )           //////////port c
 214:	90 ef       	ldi	r25, 0xF0	; 240
 216:	98 0f       	add	r25, r24
 218:	98 30       	cpi	r25, 0x08	; 8
 21a:	e8 f4       	brcc	.+58     	; 0x256 <DIO_WritePin+0xc2>
	 {
		 PinNumber=PinNumber-16;
		 
		 if (Value == LOW)
 21c:	61 11       	cpse	r22, r1
 21e:	0e c0       	rjmp	.+28     	; 0x23c <DIO_WritePin+0xa8>
		 {
			 CLRBIT(PORTC, PinNumber);
 220:	45 b3       	in	r20, 0x15	; 21
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_WritePin+0x9a>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	9a 95       	dec	r25
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_WritePin+0x96>
 232:	cb 01       	movw	r24, r22
 234:	80 95       	com	r24
 236:	84 23       	and	r24, r20
 238:	85 bb       	out	0x15, r24	; 21
 23a:	08 95       	ret
		 }
		 else
		 {
			 SETBIT(PORTC, PinNumber);
 23c:	45 b3       	in	r20, 0x15	; 21
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	b9 01       	movw	r22, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_WritePin+0xb6>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	9a 95       	dec	r25
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_WritePin+0xb2>
 24e:	cb 01       	movw	r24, r22
 250:	84 2b       	or	r24, r20
 252:	85 bb       	out	0x15, r24	; 21
 254:	08 95       	ret
		 }

	 }
	 else if( (PinNumber>=24)&&(PinNumber<=31) )           //////////port d
 256:	88 51       	subi	r24, 0x18	; 24
 258:	88 30       	cpi	r24, 0x08	; 8
 25a:	e0 f4       	brcc	.+56     	; 0x294 <DIO_WritePin+0x100>
	 {
		 PinNumber=PinNumber-24;
		 
		 if (Value == LOW)
 25c:	61 11       	cpse	r22, r1
 25e:	0e c0       	rjmp	.+28     	; 0x27c <DIO_WritePin+0xe8>
		 {
			 CLRBIT(PORTD, PinNumber);
 260:	42 b3       	in	r20, 0x12	; 18
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_WritePin+0xda>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	8a 95       	dec	r24
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_WritePin+0xd6>
 272:	cb 01       	movw	r24, r22
 274:	80 95       	com	r24
 276:	84 23       	and	r24, r20
 278:	82 bb       	out	0x12, r24	; 18
 27a:	08 95       	ret
		 }
		 else
		 {
			 SETBIT(PORTD, PinNumber);
 27c:	42 b3       	in	r20, 0x12	; 18
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_WritePin+0xf6>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_WritePin+0xf2>
 28e:	cb 01       	movw	r24, r22
 290:	84 2b       	or	r24, r20
 292:	82 bb       	out	0x12, r24	; 18
 294:	08 95       	ret

00000296 <main>:
volatile uint8_t flag = 0;
volatile uint8_t flag2 = 0;

                                             /********SENDER*****/
int main(void)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	27 97       	sbiw	r28, 0x07	; 7
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(12,OUTPUT);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	8c e0       	ldi	r24, 0x0C	; 12
 2ae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(13,OUTPUT);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	8d e0       	ldi	r24, 0x0D	; 13
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_WritePin(PA0,LOW);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_WritePin>
	
	DIO_SetPinDirection(20,OUTPUT);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	84 e1       	ldi	r24, 0x14	; 20
 2c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(22,OUTPUT);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	86 e1       	ldi	r24, 0x16	; 22
 2ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	//volatile uint8_t read;
     
     str_UartConfg_t s={9600UL,_8BITS_MODE,INTERRUPT};
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	e0 e6       	ldi	r30, 0x60	; 96
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	de 01       	movw	r26, r28
 2da:	11 96       	adiw	r26, 0x01	; 1
 2dc:	01 90       	ld	r0, Z+
 2de:	0d 92       	st	X+, r0
 2e0:	8a 95       	dec	r24
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x46>
	 UART_init(&s);
 2e4:	ce 01       	movw	r24, r28
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_init>
	 uint8_t data = 0;
 2ec:	1f 82       	std	Y+7, r1	; 0x07
    while (1) 
    {     
		UART_recieveByte(&data);		
 2ee:	ce 01       	movw	r24, r28
 2f0:	07 96       	adiw	r24, 0x07	; 7
 2f2:	0e 94 90 02 	call	0x520	; 0x520 <UART_recieveByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	89 e6       	ldi	r24, 0x69	; 105
 2fa:	98 e1       	ldi	r25, 0x18	; 24
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x66>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x70>
 306:	00 00       	nop
 308:	f2 cf       	rjmp	.-28     	; 0x2ee <main+0x58>

0000030a <__vector_13>:
		_delay_ms(1000);
    }
}

ISR(USART_RXC_vect)
{
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
	if (flag2 == 1)
 32c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	39 f4       	brne	.+14     	; 0x342 <__vector_13+0x38>
	{
		DIO_WritePin(22,HIGH);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	86 e1       	ldi	r24, 0x16	; 22
 338:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_WritePin>
		flag2 = 0;
 33c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
 340:	09 c0       	rjmp	.+18     	; 0x354 <__vector_13+0x4a>
	}
	else
	{
		flag2++;
 342:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
		DIO_WritePin(22,LOW);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	86 e1       	ldi	r24, 0x16	; 22
 350:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_WritePin>
	}
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_14>:

ISR(USART_UDRE_vect)
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
	if (flag == 1)
 398:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flag>
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	39 f4       	brne	.+14     	; 0x3ae <__vector_14+0x38>
	{
		DIO_WritePin(20,HIGH);
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	84 e1       	ldi	r24, 0x14	; 20
 3a4:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_WritePin>
		flag = 0;
 3a8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <flag>
 3ac:	09 c0       	rjmp	.+18     	; 0x3c0 <__vector_14+0x4a>
	}
	else
	{
		flag++;
 3ae:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flag>
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flag>
		DIO_WritePin(20,LOW);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	84 e1       	ldi	r24, 0x14	; 20
 3bc:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_WritePin>
	}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <UART_init>:
	{
		while(BIT_IS_CLEAR(UCSRA,UCSRA_UDRE)){}
		UDR = u8_Data;
	}	
	return 1;
}
 3e2:	cf 92       	push	r12
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	ec 01       	movw	r28, r24
 3f0:	c8 80       	ld	r12, Y
 3f2:	d9 80       	ldd	r13, Y+1	; 0x01
 3f4:	ea 80       	ldd	r14, Y+2	; 0x02
 3f6:	fb 80       	ldd	r15, Y+3	; 0x03
 3f8:	80 e6       	ldi	r24, 0x60	; 96
 3fa:	c8 16       	cp	r12, r24
 3fc:	89 e0       	ldi	r24, 0x09	; 9
 3fe:	d8 06       	cpc	r13, r24
 400:	e1 04       	cpc	r14, r1
 402:	f1 04       	cpc	r15, r1
 404:	08 f4       	brcc	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	7e c0       	rjmp	.+252    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 408:	c7 01       	movw	r24, r14
 40a:	b6 01       	movw	r22, r12
 40c:	2c e2       	ldi	r18, 0x2C	; 44
 40e:	31 e0       	ldi	r19, 0x01	; 1
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	0e 94 a0 02 	call	0x540	; 0x540 <__udivmodsi4>
 418:	67 2b       	or	r22, r23
 41a:	68 2b       	or	r22, r24
 41c:	69 2b       	or	r22, r25
 41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	73 c0       	rjmp	.+230    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	85 50       	subi	r24, 0x05	; 5
 426:	85 30       	cpi	r24, 0x05	; 5
 428:	08 f0       	brcs	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	70 c0       	rjmp	.+224    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 42c:	8d 81       	ldd	r24, Y+5	; 0x05
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	08 f0       	brcs	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	6e c0       	rjmp	.+220    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 434:	d7 01       	movw	r26, r14
 436:	c6 01       	movw	r24, r12
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	aa 1f       	adc	r26, r26
 43e:	bb 1f       	adc	r27, r27
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	aa 1f       	adc	r26, r26
 446:	bb 1f       	adc	r27, r27
 448:	9c 01       	movw	r18, r24
 44a:	ad 01       	movw	r20, r26
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	44 1f       	adc	r20, r20
 452:	55 1f       	adc	r21, r21
 454:	22 0f       	add	r18, r18
 456:	33 1f       	adc	r19, r19
 458:	44 1f       	adc	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	72 e1       	ldi	r23, 0x12	; 18
 460:	8a e7       	ldi	r24, 0x7A	; 122
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 a0 02 	call	0x540	; 0x540 <__udivmodsi4>
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	31 09       	sbc	r19, r1
 46c:	53 9a       	sbi	0x0a, 3	; 10
 46e:	54 9a       	sbi	0x0a, 4	; 10
 470:	8c 81       	ldd	r24, Y+4	; 0x04
 472:	87 30       	cpi	r24, 0x07	; 7
 474:	d9 f0       	breq	.+54     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 476:	28 f4       	brcc	.+10     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 478:	85 30       	cpi	r24, 0x05	; 5
 47a:	41 f0       	breq	.+16     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 47c:	86 30       	cpi	r24, 0x06	; 6
 47e:	71 f0       	breq	.+28     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 480:	2c c0       	rjmp	.+88     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 482:	88 30       	cpi	r24, 0x08	; 8
 484:	d9 f0       	breq	.+54     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 486:	89 30       	cpi	r24, 0x09	; 9
 488:	09 f1       	breq	.+66     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 48a:	27 c0       	rjmp	.+78     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 48c:	80 b5       	in	r24, 0x20	; 32
 48e:	8d 7f       	andi	r24, 0xFD	; 253
 490:	80 bd       	out	0x20, r24	; 32
 492:	80 b5       	in	r24, 0x20	; 32
 494:	8b 7f       	andi	r24, 0xFB	; 251
 496:	80 bd       	out	0x20, r24	; 32
 498:	52 98       	cbi	0x0a, 2	; 10
 49a:	1f c0       	rjmp	.+62     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 49c:	80 b5       	in	r24, 0x20	; 32
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	80 bd       	out	0x20, r24	; 32
 4a2:	80 b5       	in	r24, 0x20	; 32
 4a4:	8b 7f       	andi	r24, 0xFB	; 251
 4a6:	80 bd       	out	0x20, r24	; 32
 4a8:	52 98       	cbi	0x0a, 2	; 10
 4aa:	17 c0       	rjmp	.+46     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ac:	80 b5       	in	r24, 0x20	; 32
 4ae:	8d 7f       	andi	r24, 0xFD	; 253
 4b0:	80 bd       	out	0x20, r24	; 32
 4b2:	80 b5       	in	r24, 0x20	; 32
 4b4:	84 60       	ori	r24, 0x04	; 4
 4b6:	80 bd       	out	0x20, r24	; 32
 4b8:	52 98       	cbi	0x0a, 2	; 10
 4ba:	0f c0       	rjmp	.+30     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4bc:	80 b5       	in	r24, 0x20	; 32
 4be:	82 60       	ori	r24, 0x02	; 2
 4c0:	80 bd       	out	0x20, r24	; 32
 4c2:	80 b5       	in	r24, 0x20	; 32
 4c4:	84 60       	ori	r24, 0x04	; 4
 4c6:	80 bd       	out	0x20, r24	; 32
 4c8:	52 98       	cbi	0x0a, 2	; 10
 4ca:	07 c0       	rjmp	.+14     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4cc:	80 b5       	in	r24, 0x20	; 32
 4ce:	82 60       	ori	r24, 0x02	; 2
 4d0:	80 bd       	out	0x20, r24	; 32
 4d2:	80 b5       	in	r24, 0x20	; 32
 4d4:	84 60       	ori	r24, 0x04	; 4
 4d6:	80 bd       	out	0x20, r24	; 32
 4d8:	52 9a       	sbi	0x0a, 2	; 10
 4da:	80 b5       	in	r24, 0x20	; 32
 4dc:	87 7f       	andi	r24, 0xF7	; 247
 4de:	80 bd       	out	0x20, r24	; 32
 4e0:	8d 81       	ldd	r24, Y+5	; 0x05
 4e2:	81 11       	cpse	r24, r1
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <response_type>
 4ea:	78 94       	sei
 4ec:	54 9a       	sbi	0x0a, 4	; 10
 4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <response_type>
 4f6:	80 b5       	in	r24, 0x20	; 32
 4f8:	80 68       	ori	r24, 0x80	; 128
 4fa:	80 bd       	out	0x20, r24	; 32
 4fc:	29 b9       	out	0x09, r18	; 9
 4fe:	c7 9a       	sbi	0x18, 7	; 24
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	07 c0       	rjmp	.+14     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	05 c0       	rjmp	.+10     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	03 c0       	rjmp	.+6      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	01 c0       	rjmp	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	cf 90       	pop	r12
 51e:	08 95       	ret

00000520 <UART_recieveByte>:
*Description: Receiving byte of data
* Input     : pointer to u16Data
* Output    : Error Status
* */
uint8_t UART_recieveByte(uint8_t *u8_Data)
{
 520:	fc 01       	movw	r30, r24
	if (response_type == INTERRUPT)
 522:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <response_type>
 526:	91 11       	cpse	r25, r1
 528:	05 c0       	rjmp	.+10     	; 0x534 <UART_recieveByte+0x14>
	{
		if (BIT_IS_SET(UCSRA,UCSRA_RXC))
 52a:	5f 9b       	sbis	0x0b, 7	; 11
 52c:	07 c0       	rjmp	.+14     	; 0x53c <UART_recieveByte+0x1c>
		{
			*u8_Data = UDR;
 52e:	8c b1       	in	r24, 0x0c	; 12
 530:	80 83       	st	Z, r24
 532:	04 c0       	rjmp	.+8      	; 0x53c <UART_recieveByte+0x1c>
			/* Error Overwrite Data Must Be Here!. */
		}
	}
	else
	{
		while(BIT_IS_CLEAR(UCSRA,UCSRA_RXC)){}
 534:	5f 9b       	sbis	0x0b, 7	; 11
 536:	fe cf       	rjmp	.-4      	; 0x534 <UART_recieveByte+0x14>
		*u8_Data=UDR;
 538:	8c b1       	in	r24, 0x0c	; 12
 53a:	80 83       	st	Z, r24
	}	
	return 1;
}
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	08 95       	ret

00000540 <__udivmodsi4>:
 540:	a1 e2       	ldi	r26, 0x21	; 33
 542:	1a 2e       	mov	r1, r26
 544:	aa 1b       	sub	r26, r26
 546:	bb 1b       	sub	r27, r27
 548:	fd 01       	movw	r30, r26
 54a:	0d c0       	rjmp	.+26     	; 0x566 <__udivmodsi4_ep>

0000054c <__udivmodsi4_loop>:
 54c:	aa 1f       	adc	r26, r26
 54e:	bb 1f       	adc	r27, r27
 550:	ee 1f       	adc	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	a2 17       	cp	r26, r18
 556:	b3 07       	cpc	r27, r19
 558:	e4 07       	cpc	r30, r20
 55a:	f5 07       	cpc	r31, r21
 55c:	20 f0       	brcs	.+8      	; 0x566 <__udivmodsi4_ep>
 55e:	a2 1b       	sub	r26, r18
 560:	b3 0b       	sbc	r27, r19
 562:	e4 0b       	sbc	r30, r20
 564:	f5 0b       	sbc	r31, r21

00000566 <__udivmodsi4_ep>:
 566:	66 1f       	adc	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	1a 94       	dec	r1
 570:	69 f7       	brne	.-38     	; 0x54c <__udivmodsi4_loop>
 572:	60 95       	com	r22
 574:	70 95       	com	r23
 576:	80 95       	com	r24
 578:	90 95       	com	r25
 57a:	9b 01       	movw	r18, r22
 57c:	ac 01       	movw	r20, r24
 57e:	bd 01       	movw	r22, r26
 580:	cf 01       	movw	r24, r30
 582:	08 95       	ret

00000584 <_exit>:
 584:	f8 94       	cli

00000586 <__stop_program>:
 586:	ff cf       	rjmp	.-2      	; 0x586 <__stop_program>
