
SPI_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ad9  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078f  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000623  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f7  00000000  00000000  000022a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 38 01 	call	0x270	; 0x270 <main>
  64:	0c 94 bc 01 	jmp	0x378	; 0x378 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
extern void DIO_SetPinDirection(uint8_t PinNumber,uint8_t Direction)
{
	
	
	
	if( (PinNumber>=0)&&(PinNumber<=7) )           //////////port a
  6c:	88 30       	cpi	r24, 0x08	; 8
  6e:	e8 f4       	brcc	.+58     	; 0xaa <DIO_SetPinDirection+0x3e>
	{
		  if (Direction == INPUT) 
  70:	61 11       	cpse	r22, r1
  72:	0e c0       	rjmp	.+28     	; 0x90 <DIO_SetPinDirection+0x24>
		  {
			CLRBIT(DDRA, PinNumber);
  74:	4a b3       	in	r20, 0x1a	; 26
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	b9 01       	movw	r22, r18
  7c:	02 c0       	rjmp	.+4      	; 0x82 <DIO_SetPinDirection+0x16>
  7e:	66 0f       	add	r22, r22
  80:	77 1f       	adc	r23, r23
  82:	8a 95       	dec	r24
  84:	e2 f7       	brpl	.-8      	; 0x7e <DIO_SetPinDirection+0x12>
  86:	cb 01       	movw	r24, r22
  88:	80 95       	com	r24
  8a:	84 23       	and	r24, r20
  8c:	8a bb       	out	0x1a, r24	; 26
  8e:	08 95       	ret
		  } 
		  else 
		  {
			SETBIT(DDRA, PinNumber);
  90:	4a b3       	in	r20, 0x1a	; 26
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	b9 01       	movw	r22, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <DIO_SetPinDirection+0x32>
  9a:	66 0f       	add	r22, r22
  9c:	77 1f       	adc	r23, r23
  9e:	8a 95       	dec	r24
  a0:	e2 f7       	brpl	.-8      	; 0x9a <DIO_SetPinDirection+0x2e>
  a2:	cb 01       	movw	r24, r22
  a4:	84 2b       	or	r24, r20
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
	      } 

    }
	else if ((PinNumber>=8)&&(PinNumber<=15))        ////////port b 
  aa:	98 ef       	ldi	r25, 0xF8	; 248
  ac:	98 0f       	add	r25, r24
  ae:	98 30       	cpi	r25, 0x08	; 8
  b0:	e8 f4       	brcc	.+58     	; 0xec <DIO_SetPinDirection+0x80>
	{
		PinNumber=PinNumber-8;
		
		if (Direction == INPUT)
  b2:	61 11       	cpse	r22, r1
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <DIO_SetPinDirection+0x66>
		{
			CLRBIT(DDRB,PinNumber);
  b6:	47 b3       	in	r20, 0x17	; 23
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	b9 01       	movw	r22, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_SetPinDirection+0x58>
  c0:	66 0f       	add	r22, r22
  c2:	77 1f       	adc	r23, r23
  c4:	9a 95       	dec	r25
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_SetPinDirection+0x54>
  c8:	cb 01       	movw	r24, r22
  ca:	80 95       	com	r24
  cc:	84 23       	and	r24, r20
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret
		}
		else
		{
			SETBIT(DDRB,PinNumber);
  d2:	47 b3       	in	r20, 0x17	; 23
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	b9 01       	movw	r22, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_SetPinDirection+0x74>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	9a 95       	dec	r25
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_SetPinDirection+0x70>
  e4:	cb 01       	movw	r24, r22
  e6:	84 2b       	or	r24, r20
  e8:	87 bb       	out	0x17, r24	; 23
  ea:	08 95       	ret
		}

	}
	else if ((PinNumber>=16)&&(PinNumber<=23))        ////////port c
  ec:	90 ef       	ldi	r25, 0xF0	; 240
  ee:	98 0f       	add	r25, r24
  f0:	98 30       	cpi	r25, 0x08	; 8
  f2:	e8 f4       	brcc	.+58     	; 0x12e <DIO_SetPinDirection+0xc2>
	{
		PinNumber=PinNumber-16;
		
		if (Direction == INPUT)
  f4:	61 11       	cpse	r22, r1
  f6:	0e c0       	rjmp	.+28     	; 0x114 <DIO_SetPinDirection+0xa8>
		{
			CLRBIT(DDRC,PinNumber);
  f8:	44 b3       	in	r20, 0x14	; 20
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_SetPinDirection+0x9a>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	9a 95       	dec	r25
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_SetPinDirection+0x96>
 10a:	cb 01       	movw	r24, r22
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
		}
		else
		{
			SETBIT(DDRC,PinNumber);
 114:	44 b3       	in	r20, 0x14	; 20
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	b9 01       	movw	r22, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDirection+0xb6>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	9a 95       	dec	r25
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDirection+0xb2>
 126:	cb 01       	movw	r24, r22
 128:	84 2b       	or	r24, r20
 12a:	84 bb       	out	0x14, r24	; 20
 12c:	08 95       	ret
		}

	}
	else if ((PinNumber>=24)&&(PinNumber<=31))        ////////port d
 12e:	88 51       	subi	r24, 0x18	; 24
 130:	88 30       	cpi	r24, 0x08	; 8
 132:	e0 f4       	brcc	.+56     	; 0x16c <DIO_SetPinDirection+0x100>
	{
		PinNumber=PinNumber-24;
		
		if (Direction == INPUT)
 134:	61 11       	cpse	r22, r1
 136:	0e c0       	rjmp	.+28     	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			CLRBIT(DDRD,PinNumber);
 138:	41 b3       	in	r20, 0x11	; 17
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	b9 01       	movw	r22, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDirection+0xda>
 142:	66 0f       	add	r22, r22
 144:	77 1f       	adc	r23, r23
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDirection+0xd6>
 14a:	cb 01       	movw	r24, r22
 14c:	80 95       	com	r24
 14e:	84 23       	and	r24, r20
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret
		}
		else
		{
			SETBIT(DDRD,PinNumber);
 154:	41 b3       	in	r20, 0x11	; 17
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SetPinDirection+0xf6>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	8a 95       	dec	r24
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SetPinDirection+0xf2>
 166:	cb 01       	movw	r24, r22
 168:	84 2b       	or	r24, r20
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_WritePin>:

extern void DIO_WritePin(uint8_t PinNumber,uint8_t Value)
{
	 ////////////// lazem acheck 3la el direction eno ouput
	 
	 if( (PinNumber>=0)&&(PinNumber<=7) )           //////////port a
 16e:	88 30       	cpi	r24, 0x08	; 8
 170:	e8 f4       	brcc	.+58     	; 0x1ac <DIO_WritePin+0x3e>
	 {
		 if (Value == LOW)
 172:	61 11       	cpse	r22, r1
 174:	0e c0       	rjmp	.+28     	; 0x192 <DIO_WritePin+0x24>
		 {
			 CLRBIT(PORTA, PinNumber);
 176:	4b b3       	in	r20, 0x1b	; 27
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_WritePin+0x16>
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	8a 95       	dec	r24
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_WritePin+0x12>
 188:	cb 01       	movw	r24, r22
 18a:	80 95       	com	r24
 18c:	84 23       	and	r24, r20
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	08 95       	ret
		 }
		 else
		 {
			 SETBIT(PORTA, PinNumber);
 192:	4b b3       	in	r20, 0x1b	; 27
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_WritePin+0x32>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_WritePin+0x2e>
 1a4:	cb 01       	movw	r24, r22
 1a6:	84 2b       	or	r24, r20
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
		 }

	 }
	 else if( (PinNumber>=8)&&(PinNumber<=15) )           //////////port b
 1ac:	98 ef       	ldi	r25, 0xF8	; 248
 1ae:	98 0f       	add	r25, r24
 1b0:	98 30       	cpi	r25, 0x08	; 8
 1b2:	e8 f4       	brcc	.+58     	; 0x1ee <DIO_WritePin+0x80>
	 {
		 PinNumber=PinNumber-8;
		 
		 if (Value == LOW)
 1b4:	61 11       	cpse	r22, r1
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <DIO_WritePin+0x66>
		 {
			 CLRBIT(PORTB, PinNumber);
 1b8:	48 b3       	in	r20, 0x18	; 24
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	b9 01       	movw	r22, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePin+0x58>
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	9a 95       	dec	r25
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePin+0x54>
 1ca:	cb 01       	movw	r24, r22
 1cc:	80 95       	com	r24
 1ce:	84 23       	and	r24, r20
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
		 }
		 else
		 {
			 SETBIT(PORTB, PinNumber);
 1d4:	48 b3       	in	r20, 0x18	; 24
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	b9 01       	movw	r22, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_WritePin+0x74>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	9a 95       	dec	r25
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_WritePin+0x70>
 1e6:	cb 01       	movw	r24, r22
 1e8:	84 2b       	or	r24, r20
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
		 }

	 }
	 else if( (PinNumber>=16)&&(PinNumber<=23) )           //////////port c
 1ee:	90 ef       	ldi	r25, 0xF0	; 240
 1f0:	98 0f       	add	r25, r24
 1f2:	98 30       	cpi	r25, 0x08	; 8
 1f4:	e8 f4       	brcc	.+58     	; 0x230 <DIO_WritePin+0xc2>
	 {
		 PinNumber=PinNumber-16;
		 
		 if (Value == LOW)
 1f6:	61 11       	cpse	r22, r1
 1f8:	0e c0       	rjmp	.+28     	; 0x216 <DIO_WritePin+0xa8>
		 {
			 CLRBIT(PORTC, PinNumber);
 1fa:	45 b3       	in	r20, 0x15	; 21
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_WritePin+0x9a>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	9a 95       	dec	r25
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_WritePin+0x96>
 20c:	cb 01       	movw	r24, r22
 20e:	80 95       	com	r24
 210:	84 23       	and	r24, r20
 212:	85 bb       	out	0x15, r24	; 21
 214:	08 95       	ret
		 }
		 else
		 {
			 SETBIT(PORTC, PinNumber);
 216:	45 b3       	in	r20, 0x15	; 21
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_WritePin+0xb6>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	9a 95       	dec	r25
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_WritePin+0xb2>
 228:	cb 01       	movw	r24, r22
 22a:	84 2b       	or	r24, r20
 22c:	85 bb       	out	0x15, r24	; 21
 22e:	08 95       	ret
		 }

	 }
	 else if( (PinNumber>=24)&&(PinNumber<=31) )           //////////port d
 230:	88 51       	subi	r24, 0x18	; 24
 232:	88 30       	cpi	r24, 0x08	; 8
 234:	e0 f4       	brcc	.+56     	; 0x26e <DIO_WritePin+0x100>
	 {
		 PinNumber=PinNumber-24;
		 
		 if (Value == LOW)
 236:	61 11       	cpse	r22, r1
 238:	0e c0       	rjmp	.+28     	; 0x256 <DIO_WritePin+0xe8>
		 {
			 CLRBIT(PORTD, PinNumber);
 23a:	42 b3       	in	r20, 0x12	; 18
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_WritePin+0xda>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_WritePin+0xd6>
 24c:	cb 01       	movw	r24, r22
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret
		 }
		 else
		 {
			 SETBIT(PORTD, PinNumber);
 256:	42 b3       	in	r20, 0x12	; 18
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	b9 01       	movw	r22, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_WritePin+0xf6>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	8a 95       	dec	r24
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_WritePin+0xf2>
 268:	cb 01       	movw	r24, r22
 26a:	84 2b       	or	r24, r20
 26c:	82 bb       	out	0x12, r24	; 18
 26e:	08 95       	ret

00000270 <main>:
//#include <avr/io.h>
#include "SPI.h"


int main(void)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <main+0x6>
 276:	00 d0       	rcall	.+0      	; 0x278 <main+0x8>
 278:	00 d0       	rcall	.+0      	; 0x27a <main+0xa>
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	str_SpiConfg_t s;
	s.u8MasterSlave=SLAVE;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	89 83       	std	Y+1, r24	; 0x01
	s.u8PreScaller=CLK_4;
 282:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t read;
	DIO_SetPinDirection(PA0,OUTPUT);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	SPI_Init(&s);
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	0e 94 59 01 	call	0x2b2	; 0x2b2 <SPI_Init>
    while (1) 
    {
		read=SPI_ReciveByte();
 294:	0e 94 b8 01 	call	0x370	; 0x370 <SPI_ReciveByte>
		
		if (read==HIGH)
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	29 f4       	brne	.+10     	; 0x2a6 <main+0x36>
		{
			DIO_WritePin(PA0,HIGH);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePin>
 2a4:	f7 cf       	rjmp	.-18     	; 0x294 <main+0x24>
		} 
		else if(read==LOW)
 2a6:	81 11       	cpse	r24, r1
 2a8:	f5 cf       	rjmp	.-22     	; 0x294 <main+0x24>
		{
			DIO_WritePin(PA0,LOW);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePin>
 2b0:	f1 cf       	rjmp	.-30     	; 0x294 <main+0x24>

000002b2 <SPI_Init>:
extern uint8_t SPI_SendByte(uint8_t u8Data)
{
	SPDR = u8Data;
	while(!GETBIT(SPSR,SPIF)){}
		return 1;	
}
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 81       	ld	r18, Z
 2ba:	22 30       	cpi	r18, 0x02	; 2
 2bc:	08 f0       	brcs	.+2      	; 0x2c0 <SPI_Init+0xe>
 2be:	52 c0       	rjmp	.+164    	; 0x364 <SPI_Init+0xb2>
 2c0:	31 81       	ldd	r19, Z+1	; 0x01
 2c2:	34 30       	cpi	r19, 0x04	; 4
 2c4:	08 f0       	brcs	.+2      	; 0x2c8 <SPI_Init+0x16>
 2c6:	50 c0       	rjmp	.+160    	; 0x368 <SPI_Init+0xb6>
 2c8:	ec 01       	movw	r28, r24
 2ca:	22 23       	and	r18, r18
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <SPI_Init+0x22>
 2ce:	21 30       	cpi	r18, 0x01	; 1
 2d0:	99 f0       	breq	.+38     	; 0x2f8 <SPI_Init+0x46>
 2d2:	23 c0       	rjmp	.+70     	; 0x31a <SPI_Init+0x68>
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	8c e0       	ldi	r24, 0x0C	; 12
 2d8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	8e e0       	ldi	r24, 0x0E	; 14
 2e8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	8f e0       	ldi	r24, 0x0F	; 15
 2f0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 2f4:	6c 9a       	sbi	0x0d, 4	; 13
 2f6:	11 c0       	rjmp	.+34     	; 0x31a <SPI_Init+0x68>
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	8d e0       	ldi	r24, 0x0D	; 13
 304:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	8e e0       	ldi	r24, 0x0E	; 14
 30c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 318:	6c 98       	cbi	0x0d, 4	; 13
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	61 f0       	breq	.+24     	; 0x338 <SPI_Init+0x86>
 320:	28 f0       	brcs	.+10     	; 0x32c <SPI_Init+0x7a>
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	71 f0       	breq	.+28     	; 0x342 <SPI_Init+0x90>
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	89 f0       	breq	.+34     	; 0x34c <SPI_Init+0x9a>
 32a:	16 c0       	rjmp	.+44     	; 0x358 <SPI_Init+0xa6>
 32c:	8d b1       	in	r24, 0x0d	; 13
 32e:	8c 7f       	andi	r24, 0xFC	; 252
 330:	8d b9       	out	0x0d, r24	; 13
 332:	8d b1       	in	r24, 0x0d	; 13
 334:	8d b9       	out	0x0d, r24	; 13
 336:	10 c0       	rjmp	.+32     	; 0x358 <SPI_Init+0xa6>
 338:	8d b1       	in	r24, 0x0d	; 13
 33a:	8c 7f       	andi	r24, 0xFC	; 252
 33c:	8d b9       	out	0x0d, r24	; 13
 33e:	68 9a       	sbi	0x0d, 0	; 13
 340:	0b c0       	rjmp	.+22     	; 0x358 <SPI_Init+0xa6>
 342:	8d b1       	in	r24, 0x0d	; 13
 344:	8c 7f       	andi	r24, 0xFC	; 252
 346:	8d b9       	out	0x0d, r24	; 13
 348:	69 9a       	sbi	0x0d, 1	; 13
 34a:	06 c0       	rjmp	.+12     	; 0x358 <SPI_Init+0xa6>
 34c:	8d b1       	in	r24, 0x0d	; 13
 34e:	8c 7f       	andi	r24, 0xFC	; 252
 350:	8d b9       	out	0x0d, r24	; 13
 352:	8d b1       	in	r24, 0x0d	; 13
 354:	83 60       	ori	r24, 0x03	; 3
 356:	8d b9       	out	0x0d, r24	; 13
 358:	6b 98       	cbi	0x0d, 3	; 13
 35a:	6a 98       	cbi	0x0d, 2	; 13
 35c:	6d 98       	cbi	0x0d, 5	; 13
 35e:	6e 9a       	sbi	0x0d, 6	; 13
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	03 c0       	rjmp	.+6      	; 0x36a <SPI_Init+0xb8>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	01 c0       	rjmp	.+2      	; 0x36a <SPI_Init+0xb8>
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <SPI_ReciveByte>:
* Input     : poiter to data read data in it
* Output    : Error Status
* */
 uint8_t SPI_ReciveByte(void)
{
   while(!GETBIT(SPSR,SPIF)){} 
 370:	77 9b       	sbis	0x0e, 7	; 14
 372:	fe cf       	rjmp	.-4      	; 0x370 <SPI_ReciveByte>
   
   
   return SPDR;
 374:	8f b1       	in	r24, 0x0f	; 15
}
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
