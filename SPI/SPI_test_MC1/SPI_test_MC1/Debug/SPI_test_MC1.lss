
SPI_test_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b60  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fc  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073d  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a5  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d8  00000000  00000000  000024d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	uint8_t u8ClockPhase;
	
}str_SpiConfg_t;*/

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
    
	DIO_SetPinDirection(PB0,OUTPUT);
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
	
	str_SpiConfg_t s;
	s.u8MasterSlave=MASTER;
  88:	19 82       	std	Y+1, r1	; 0x01
	s.u8PreScaller=CLK_4;
  8a:	1a 82       	std	Y+2, r1	; 0x02
	DIO_SetPinDirection(PA0,INPUT);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
	volatile uint8_t read;
	SPI_Init(&s);
  94:	ce 01       	movw	r24, r28
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Init>
    while (1) 
    {
		read=DIO_ReadPin(PA0);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_ReadPin>
  a2:	8f 83       	std	Y+7, r24	; 0x07
		
		SPI_SendByte(read);
  a4:	8f 81       	ldd	r24, Y+7	; 0x07
  a6:	0e 94 99 01 	call	0x332	; 0x332 <SPI_SendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	80 e7       	ldi	r24, 0x70	; 112
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
  bc:	ef cf       	rjmp	.-34     	; 0x9c <main+0x30>

000000be <DIO_SetPinDirection>:
		{
			CLRBIT(PORTD, PinNumber);
		}
		else
		{
			SETBIT(PORTD, PinNumber);
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	e8 f4       	brcc	.+58     	; 0xfc <DIO_SetPinDirection+0x3e>
  c2:	61 11       	cpse	r22, r1
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <DIO_SetPinDirection+0x24>
  c6:	4a b3       	in	r20, 0x1a	; 26
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDirection+0x16>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDirection+0x12>
  d8:	cb 01       	movw	r24, r22
  da:	80 95       	com	r24
  dc:	84 23       	and	r24, r20
  de:	8a bb       	out	0x1a, r24	; 26
  e0:	08 95       	ret
  e2:	4a b3       	in	r20, 0x1a	; 26
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPinDirection+0x32>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPinDirection+0x2e>
  f4:	cb 01       	movw	r24, r22
  f6:	84 2b       	or	r24, r20
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	08 95       	ret
  fc:	98 ef       	ldi	r25, 0xF8	; 248
  fe:	98 0f       	add	r25, r24
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	e8 f4       	brcc	.+58     	; 0x13e <DIO_SetPinDirection+0x80>
 104:	61 11       	cpse	r22, r1
 106:	0e c0       	rjmp	.+28     	; 0x124 <DIO_SetPinDirection+0x66>
 108:	47 b3       	in	r20, 0x17	; 23
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SetPinDirection+0x58>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	9a 95       	dec	r25
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SetPinDirection+0x54>
 11a:	cb 01       	movw	r24, r22
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	87 bb       	out	0x17, r24	; 23
 122:	08 95       	ret
 124:	47 b3       	in	r20, 0x17	; 23
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SetPinDirection+0x74>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	9a 95       	dec	r25
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SetPinDirection+0x70>
 136:	cb 01       	movw	r24, r22
 138:	84 2b       	or	r24, r20
 13a:	87 bb       	out	0x17, r24	; 23
 13c:	08 95       	ret
 13e:	90 ef       	ldi	r25, 0xF0	; 240
 140:	98 0f       	add	r25, r24
 142:	98 30       	cpi	r25, 0x08	; 8
 144:	e8 f4       	brcc	.+58     	; 0x180 <DIO_SetPinDirection+0xc2>
 146:	61 11       	cpse	r22, r1
 148:	0e c0       	rjmp	.+28     	; 0x166 <DIO_SetPinDirection+0xa8>
 14a:	44 b3       	in	r20, 0x14	; 20
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDirection+0x9a>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	9a 95       	dec	r25
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDirection+0x96>
 15c:	cb 01       	movw	r24, r22
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	44 b3       	in	r20, 0x14	; 20
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	b9 01       	movw	r22, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinDirection+0xb6>
 170:	66 0f       	add	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	9a 95       	dec	r25
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinDirection+0xb2>
 178:	cb 01       	movw	r24, r22
 17a:	84 2b       	or	r24, r20
 17c:	84 bb       	out	0x14, r24	; 20
 17e:	08 95       	ret
 180:	88 51       	subi	r24, 0x18	; 24
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	e0 f4       	brcc	.+56     	; 0x1be <DIO_SetPinDirection+0x100>
 186:	61 11       	cpse	r22, r1
 188:	0e c0       	rjmp	.+28     	; 0x1a6 <DIO_SetPinDirection+0xe8>
 18a:	41 b3       	in	r20, 0x11	; 17
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SetPinDirection+0xda>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SetPinDirection+0xd6>
 19c:	cb 01       	movw	r24, r22
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	81 bb       	out	0x11, r24	; 17
 1a4:	08 95       	ret
 1a6:	41 b3       	in	r20, 0x11	; 17
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPinDirection+0xf6>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPinDirection+0xf2>
 1b8:	cb 01       	movw	r24, r22
 1ba:	84 2b       	or	r24, r20
 1bc:	81 bb       	out	0x11, r24	; 17
 1be:	08 95       	ret

000001c0 <DIO_ReadPin>:

extern uint8_t  DIO_ReadPin(uint8_t PinNumber)
{     
	uint8_t value=0;
	
	if( (PinNumber>=0)&&(PinNumber<=7) )           //////////port a
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	a0 f4       	brcc	.+40     	; 0x1ec <DIO_ReadPin+0x2c>
	{
		
		value= (GETBIT(PINA,PinNumber));
 1c4:	49 b3       	in	r20, 0x19	; 25
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	08 2e       	mov	r0, r24
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_ReadPin+0x12>
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_ReadPin+0xe>
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	24 23       	and	r18, r20
 1da:	35 23       	and	r19, r21
 1dc:	a9 01       	movw	r20, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_ReadPin+0x24>
 1e0:	55 95       	asr	r21
 1e2:	47 95       	ror	r20
 1e4:	8a 95       	dec	r24
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_ReadPin+0x20>
 1e8:	ca 01       	movw	r24, r20
 1ea:	08 95       	ret
		
	}
	else if( (PinNumber>=8)&&(PinNumber<=15) )           //////////port b
 1ec:	48 ef       	ldi	r20, 0xF8	; 248
 1ee:	48 0f       	add	r20, r24
 1f0:	48 30       	cpi	r20, 0x08	; 8
 1f2:	90 f4       	brcc	.+36     	; 0x218 <DIO_ReadPin+0x58>
	{
		PinNumber=PinNumber-8;
		
		value= (GETBIT(PINB, PinNumber));
 1f4:	26 b3       	in	r18, 0x16	; 22
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	04 2e       	mov	r0, r20
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_ReadPin+0x42>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_ReadPin+0x3e>
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	82 23       	and	r24, r18
 20a:	93 23       	and	r25, r19
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_ReadPin+0x52>
 20e:	95 95       	asr	r25
 210:	87 95       	ror	r24
 212:	4a 95       	dec	r20
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_ReadPin+0x4e>
 216:	08 95       	ret
		
	}
	else if( (PinNumber>=16)&&(PinNumber<=23) )           //////////port c
 218:	40 ef       	ldi	r20, 0xF0	; 240
 21a:	48 0f       	add	r20, r24
 21c:	48 30       	cpi	r20, 0x08	; 8
 21e:	90 f4       	brcc	.+36     	; 0x244 <DIO_ReadPin+0x84>
	{
		PinNumber=PinNumber-16;
		
		value= (GETBIT(PINC,PinNumber));
 220:	23 b3       	in	r18, 0x13	; 19
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	04 2e       	mov	r0, r20
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_ReadPin+0x6e>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_ReadPin+0x6a>
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	82 23       	and	r24, r18
 236:	93 23       	and	r25, r19
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_ReadPin+0x7e>
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	4a 95       	dec	r20
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_ReadPin+0x7a>
 242:	08 95       	ret
		
	}
	else if( (PinNumber>=24)&&(PinNumber<=31) )           //////////port d
 244:	48 ee       	ldi	r20, 0xE8	; 232
 246:	48 0f       	add	r20, r24
 248:	48 30       	cpi	r20, 0x08	; 8
 24a:	90 f4       	brcc	.+36     	; 0x270 <DIO_ReadPin+0xb0>
	{
		PinNumber=PinNumber-24;
		
		value= (GETBIT(PIND, PinNumber));
 24c:	20 b3       	in	r18, 0x10	; 16
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	04 2e       	mov	r0, r20
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_ReadPin+0x9a>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_ReadPin+0x96>
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	82 23       	and	r24, r18
 262:	93 23       	and	r25, r19
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_ReadPin+0xaa>
 266:	95 95       	asr	r25
 268:	87 95       	ror	r24
 26a:	4a 95       	dec	r20
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_ReadPin+0xa6>
 26e:	08 95       	ret

/*********Getting pin value********/

extern uint8_t  DIO_ReadPin(uint8_t PinNumber)
{     
	uint8_t value=0;
 270:	80 e0       	ldi	r24, 0x00	; 0
		
	}
	
return value;
	
}
 272:	08 95       	ret

00000274 <SPI_Init>:
* Input     : pointer to spi configuration struct
* Output    : Error Status
* */

extern uint8_t SPI_Init(str_SpiConfg_t *Spi_config)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
	uint8_t u8Error = ERROR_OK;
	
	if ( (Spi_config->u8MasterSlave != MASTER) && (Spi_config->u8MasterSlave !=SLAVE) )
 278:	fc 01       	movw	r30, r24
 27a:	20 81       	ld	r18, Z
 27c:	22 30       	cpi	r18, 0x02	; 2
 27e:	08 f0       	brcs	.+2      	; 0x282 <SPI_Init+0xe>
 280:	52 c0       	rjmp	.+164    	; 0x326 <SPI_Init+0xb2>
	     u8Error = ERROR_MAST_SLAVE;
	
	} 
	else
	{  
	   if ( ((Spi_config->u8PreScaller)!= CLK_4) && ((Spi_config->u8PreScaller)!= CLK_16) && ((Spi_config->u8PreScaller)!= CLK_64) && ((Spi_config->u8PreScaller)!= CLK_128) )
 282:	31 81       	ldd	r19, Z+1	; 0x01
 284:	34 30       	cpi	r19, 0x04	; 4
 286:	08 f0       	brcs	.+2      	; 0x28a <SPI_Init+0x16>
 288:	50 c0       	rjmp	.+160    	; 0x32a <SPI_Init+0xb6>
 28a:	ec 01       	movw	r28, r24
		  
	   } 
	   else
	   {
		    
		   switch (Spi_config->u8MasterSlave)   /***SET SPI DIRECTIONS FOR MASTER AND SLAVE*****/
 28c:	22 23       	and	r18, r18
 28e:	19 f0       	breq	.+6      	; 0x296 <SPI_Init+0x22>
 290:	21 30       	cpi	r18, 0x01	; 1
 292:	99 f0       	breq	.+38     	; 0x2ba <SPI_Init+0x46>
 294:	23 c0       	rjmp	.+70     	; 0x2dc <SPI_Init+0x68>
		   {
			   case (MASTER):
			   
			   DIO_SetPinDirection(PB4,OUTPUT);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
			   DIO_SetPinDirection(PB5,OUTPUT);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
			   DIO_SetPinDirection(PB6,INPUT);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	8e e0       	ldi	r24, 0x0E	; 14
 2aa:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
			   DIO_SetPinDirection(PB7,OUTPUT);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	8f e0       	ldi	r24, 0x0F	; 15
 2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
			   
			  // SPCR = (1<<SPE) | (1<<MSTR);
			   SETBIT(SPCR,MSTR);
 2b6:	6c 9a       	sbi	0x0d, 4	; 13
			   
			   break;
 2b8:	11 c0       	rjmp	.+34     	; 0x2dc <SPI_Init+0x68>
			   
			   case (SLAVE):
			   
			   DIO_SetPinDirection(PB4,INPUT);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
			   DIO_SetPinDirection(PB5,INPUT);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
			   DIO_SetPinDirection(PB6,OUTPUT);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	8e e0       	ldi	r24, 0x0E	; 14
 2ce:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
			   DIO_SetPinDirection(PB7,INPUT);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	8f e0       	ldi	r24, 0x0F	; 15
 2d6:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDirection>
			   CLRBIT(SPCR,MSTR);
 2da:	6c 98       	cbi	0x0d, 4	; 13
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

static void SettingSpiPrescaller(uint8_t prescaller)
{
	switch(prescaller)
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	61 f0       	breq	.+24     	; 0x2fa <SPI_Init+0x86>
 2e2:	28 f0       	brcs	.+10     	; 0x2ee <SPI_Init+0x7a>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	71 f0       	breq	.+28     	; 0x304 <SPI_Init+0x90>
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	89 f0       	breq	.+34     	; 0x30e <SPI_Init+0x9a>
 2ec:	16 c0       	rjmp	.+44     	; 0x31a <SPI_Init+0xa6>
	{
		case (CLK_4):
		
		SPCR &= 0xFC;
 2ee:	8d b1       	in	r24, 0x0d	; 13
 2f0:	8c 7f       	andi	r24, 0xFC	; 252
 2f2:	8d b9       	out	0x0d, r24	; 13
		SPCR|=CLK_4;
 2f4:	8d b1       	in	r24, 0x0d	; 13
 2f6:	8d b9       	out	0x0d, r24	; 13
 2f8:	10 c0       	rjmp	.+32     	; 0x31a <SPI_Init+0xa6>
		
		break;
		
		case (CLK_16):
		
		SPCR &= 0xFC;
 2fa:	8d b1       	in	r24, 0x0d	; 13
 2fc:	8c 7f       	andi	r24, 0xFC	; 252
 2fe:	8d b9       	out	0x0d, r24	; 13
		SPCR|=CLK_16;
 300:	68 9a       	sbi	0x0d, 0	; 13
 302:	0b c0       	rjmp	.+22     	; 0x31a <SPI_Init+0xa6>
		
		break;
		
		case (CLK_64):
		
		SPCR &= 0xFC;
 304:	8d b1       	in	r24, 0x0d	; 13
 306:	8c 7f       	andi	r24, 0xFC	; 252
 308:	8d b9       	out	0x0d, r24	; 13
		SPCR|=CLK_64;
 30a:	69 9a       	sbi	0x0d, 1	; 13
 30c:	06 c0       	rjmp	.+12     	; 0x31a <SPI_Init+0xa6>
		
		break;
		
		case (CLK_128):
		
		SPCR &= 0xFC;
 30e:	8d b1       	in	r24, 0x0d	; 13
 310:	8c 7f       	andi	r24, 0xFC	; 252
 312:	8d b9       	out	0x0d, r24	; 13
		SPCR|=CLK_128;
 314:	8d b1       	in	r24, 0x0d	; 13
 316:	83 60       	ori	r24, 0x03	; 3
 318:	8d b9       	out	0x0d, r24	; 13
		   
		   /*********SETTING PRESCALLER*************/
		   SettingSpiPrescaller(Spi_config->u8PreScaller);
		   
		   /**SETTING DATA ORDER**/
		   CLRBIT(SPCR,CPOL);
 31a:	6b 98       	cbi	0x0d, 3	; 13
		   CLRBIT(SPCR,CPHA);
 31c:	6a 98       	cbi	0x0d, 2	; 13
		   
		   CLRBIT(SPCR,DORD);
 31e:	6d 98       	cbi	0x0d, 5	; 13
		   SETBIT(SPCR,SPE);                /**ENABLE SPI MODULE**/
 320:	6e 9a       	sbi	0x0d, 6	; 13
* Output    : Error Status
* */

extern uint8_t SPI_Init(str_SpiConfg_t *Spi_config)
{
	uint8_t u8Error = ERROR_OK;
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	03 c0       	rjmp	.+6      	; 0x32c <SPI_Init+0xb8>
	
	if ( (Spi_config->u8MasterSlave != MASTER) && (Spi_config->u8MasterSlave !=SLAVE) )
	{
	     u8Error = ERROR_MAST_SLAVE;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	01 c0       	rjmp	.+2      	; 0x32c <SPI_Init+0xb8>
	} 
	else
	{  
	   if ( ((Spi_config->u8PreScaller)!= CLK_4) && ((Spi_config->u8PreScaller)!= CLK_16) && ((Spi_config->u8PreScaller)!= CLK_64) && ((Spi_config->u8PreScaller)!= CLK_128) )
	   {
		   u8Error = ERROR_PRESCAL;
 32a:	82 e0       	ldi	r24, 0x02	; 2
		   
	   }
	   
	}
	return u8Error;
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <SPI_SendByte>:
* Output    : Error Status
* */
extern uint8_t SPI_SendByte(uint8_t u8Data)
{
	
	SPDR = u8Data;
 332:	8f b9       	out	0x0f, r24	; 15
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
 334:	77 9b       	sbis	0x0e, 7	; 14
 336:	fe cf       	rjmp	.-4      	; 0x334 <SPI_SendByte+0x2>
		
		return 1;	
}
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
